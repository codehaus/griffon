{"type":"plugin","name":"spring","title":"Spring framework libraries and helpers","license":"Apache Software License 2.0","version":"0.9","source":"https://github.com/griffon/griffon-spring-plugin","documentation":"","griffonVersion":"0.9.5 > *","description":"Enables the usage of the [Spring framework][1] as Dependency Injection provider, and much more!\n\nUsage\n-----\nThe Spring plugin will manage all relationships between artifacts by autowiring them by name.\nIt relies on [Grail's BeanBuilder][2] to get the job done. You may place additional beans to\nbe wired in a script named `resources.groovy` and place it under `src/spring`. This script\nshould contain bean definitions as expected by BeanBuilder.\n\nYou can also create addons that are Spring aware. Follow these steps to create such an addon\n\n1. Create a new plugin project\n\n        griffon create-plugin foo\n\n2. Change into the newly created plugin's directory and create an addon\n\n        griffon create-addon foo\n    \n3. Edit your plugin's descriptor by declaring a dependency on the spring plugin\n    \n        class FooGriffonPlugin {\n            Map dependsOn = [spring: '0.9']\n            ...\n        }\n        \n4. Your addon must contain at least one of the following properties\n\n        class FooGriffonAddon {\n            ...\n            def doWithSpring = {\n                // place bean definitions here\n                // this closure will be called in the\n                // context of a BeanBuilder instance\n            }\n     \n            def whenSpringReady = { app ->\n                // called after all addons have been initialized\n                // and all bean contributions have been processed\n            }\n            ...\n        }\n\nAddons that do not define a hard dependency on the Spring plugin can still contribute beans,\neither by placing bean definitions inside the `doWithSpring` property (might require access\nto Spring classes like factory beans) or inside `griffon-app/conf/metainf/spring/springbeans.groovy`\n(using the same format as `src/spring/resources.groovy`). The latter form is preferred for bean\ncontributions that require spring classes which are not available in the plugin's classpath at buildtime.\n\n### Exposed Beans\n\nThe following beans are automatically configured in the ApplicationContext\n\n| Name            | Type                            | Notes                           |\n| ----------------| ------------------------------- | ------------------------------- |\n| application     | griffon.core.GriffonApplication | current application instance    |\n| appConfig       | groovy.util.ConfigObject        | the application's configuration |\n| artifactManager | griffon.core.ArtifactManager    |                                 |\n| addonManager    | griffon.core.AddonManager       |                                 |\n| mvcGroupManager | griffon.core.MVCGroupManager    |                                 |\n| uiThreadManager | griffon.core.UIThreadManager    |                                 |\n\nAdditionally, all Model, View, Controller classes will see their respective GriffonClass exposed\nfollowing a naming convention. If the model class is `sample.SampleModel` then it's griffonClass\nwill be exposed as `sampleModelClass`.\n\n### Events\n\nThe following events will be triggered by this addon\n\n * WithSpringStart[app, applicationContext] - triggered before bean contributions from addons are processed\n * WithSpringEnd[app, applicationContext] - triggered after bean contributions from addons have been processed\n * WhenSpringReadyStart[app, applicationContext] - triggered before addons tweak the applicationContext\n * WhenSpringReadyEnd[app, applicationContext] - triggered after addons have had a chance to tweak the applicationContext\n\n\n[1]: http://www.springframework.org\n[2]: http://www.grails.org/Spring+Bean+Builder","authors":[{"name":"Andres Almiray","email":"aalmiray@yahoo.com"}],"dependencies":[],"toolkits":[],"platforms":[]}