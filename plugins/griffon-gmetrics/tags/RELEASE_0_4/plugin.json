{"type":"plugin","name":"gmetrics","title":"Code metrics plugin","license":"Apache Software License 2.0","version":"0.4","source":"https://github.com/griffon/griffon-gmetrics-plugin","documentation":"","griffonVersion":"0.9.5 > *","description":"The GMetrics Plugin provides provides calculation and reporting of size and complexity metrics\nfor Groovy source code. It uses the [GMetrics][1] library. It began as a port of the [Grails GMetrics][2]\nplugin created by Scott Ryan.\n\nUsage\n----\nThe plugin provides a script 'gmetrics' that will analyze your code and write its results to an HTML file.\nRun the following command\n\n        griffon gmetrics\n\nto perform the analysis.\n\nConfiguration\n-------------\nThe plugin requires no customization to run. By default it will analyze all Groovy files in\n\n * src/main\n * griffon-app/controllers\n * griffon-app/models\n * griffon-app/views\n * griffon-app/services\n\nYou can restrict which folders are included or add extra ones. The following table lists settings that\nwill be read from `griffon-app/conf/BuildConfig.groovy` and used if available:\n\n| *Property*                      | *Default Value*                           | *Meaning*                                            |\n| ------------------------------- | ----------------------------------------- | ---------------------------------------------------- |\n| gmetrics.reportName             | 'gmetrics.html'                           | the name of the analysis report file                 |\n| gmetrics.reportLocation         | ${projectTargetDir}/test-reports/gmetrics | the location of the analysis report file             |\n| gmetrics.reportType             | 'html'                                    | the report type; the only valid value is 'html'      |\n| gmetrics.reportTitle            | \"GMetrics - $griffonAppName\"              | the report title                                     |\n| gmetrics.processSrcGroovy       | true                                      | whether to analyze source in src/main/*.groovy       |\n| gmetrics.processControllers     | true                                      | whether to analyze source in griffon-app/controllers |\n| gmetrics.processModels          | true                                      | whether to analyze source in griffon-app/models      |\n| gmetrics.processViews           | true                                      | whether to analyze source in griffon-app/views       |\n| gmetrics.processServices        | true                                      | whether to analyze source in griffon-app/services    |\n| gmetrics.processTestUnit        | true                                      | whether to analyze source in test/unit               |\n| gmetrics.processTestIntegration | true                                      | whether to analyze source in test/integration        |\n| gmetrics.extraIncludeDirs       | none                                      | extra source directories to include                  |\n| gmetrics.metricSetFile          | none                                      | additional metrics to run on the source              |\n\n### C.R.A.P. Metrics\n[C.R.A.P.][3] stands for `Change Risk Anti-Patterns`. You can enable this metric by defining a value for `gmetrics.metricSetFile`.\nFollow these steps to get basic C.R.A.P. metrics on your application.\n\n1. Create a new file that will hold the metric definitions, for example `crap.gmetrics`.\n2. Paste the following code into the newly create file\n\n        import org.gmetrics.metric.cyclomatic.CyclomaticComplexityMetric\n        final COBERTURA_FILE = 'file:target/test-reports/cobertura/coverage.xml'\n        metricset {\n            def cyclomaticComplexityMetric = metric(CyclomaticComplexityMetric)\n            def coberturaMetric = CoberturaLineCoverage {\n                coberturaFile = COBERTURA_FILE\n                functions = ['total']\n            }\n            CRAP {\n                functions = ['total']\n                coverageMetric = coberturaMetric\n                complexityMetric = cyclomaticComplexityMetric\n            }\n        }\n\n3. Add the file to the gmetrics configuration block in `BuildConfing.groovy` (pay attention to the relative path)\n\n        gmtetrics.metricSetFile = 'file:crap.gmetrics'\n\n4. Install the [code-coverage][4] plugin.\n5. Run tests with coverage enabled\n\n        griffon test-app -coverage\n        \n6. Run gmetrics after coverage has been stored\n\n        griffon gmetrics\n\n[1]: http://gmetrics.sourceforge.net\n[2]: http://grails.org/plugin/gmetrics\n[3]: http://googletesting.blogspot.com/2011/02/this-code-is-crap.html\n[4]: /plugin/code-coverage","authors":[{"name":"Andres Almiray","email":"aalmiray@yahoo.com"}],"dependencies":[],"toolkits":[],"platforms":[]}